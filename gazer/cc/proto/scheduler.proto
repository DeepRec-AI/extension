// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package aimaster;

enum Code {
  OK                  = 0;
  CANCELLED           = 1;
  UNKNOWN             = 2;
  INVALID_ARGUMENT    = 3;
  DEADLINE_EXCEEDED   = 4;
  NOT_FOUND           = 5;
  ALREADY_EXISTS      = 6;
  PERMISSION_DENIED   = 7;
  RESOURCE_EXHAUSTED  = 8;
  FAILED_PRECONDITION = 9;
  ABORTED             = 10;
  OUT_OF_RANGE        = 11;
  UNIMPLEMENTED       = 12;
  INTERNAL            = 13;
  UNAVAILABLE         = 14;
  DATA_LOSS           = 15;
  UNAUTHENTICATED     = 16;
  REQUEST_STOP        = 17;
}



message JobDef {
  // The name of this job.
  string name = 1;

  // Mapping from task ID to "hostname:port" string.
  //
  // If the `name` field contains "worker", and the `tasks` map contains a
  // mapping from 7 to "example.org:2222", then the device prefix
  // "/job:worker/task:7" will be assigned to "example.org:2222".
  map<int32, string> tasks = 2;
}

// Defines a TensorFlow cluster as a set of jobs.
message ClusterDef {
  // The jobs that comprise the cluster.
  repeated JobDef job = 1;
}


service RpcScheduler {
  rpc Register (SchedulerRegisterRequest) returns (SchedulerRegisterResponse) {}
  rpc GetCluster (SchedulerGetClusterRequest) returns (SchedulerGetClusterResponse) {}
  rpc Watch (SchedulerWatchRequest) returns (SchedulerWatchResponse) {}
  rpc Signal (SchedulerSignalRequest) returns (SchedulerSignalResponse) {}
  rpc ActivateTwoWayRpc (SchedulerActivateTwoWayRpcRequest) returns (SchedulerActivateTwoWayRpcResponse) {}
  rpc NotifyCheckpointDone (SchedulerNotifyCheckpointDoneRequest) returns (SchedulerNotifyCheckpointDoneResponse) {}
  rpc BeingTerminated (SchedulerBeingTerminatedRequest) returns (SchedulerBeingTerminatedResponse) {}
  rpc EstimatePSResource(PsResourceRequest) returns (AIMasterResponse) {}
  rpc GetTFConfig(AIMasterRequest) returns (AIMasterResponse) {}
  rpc SetTFConfig(AIMasterRequest) returns (AIMasterResponse) {}
  rpc CollectProcessResource(ProcessResourceRequest) returns (AIMasterResponse) {}
  
  rpc StartTableDataProcessor(TableDataStartRequest) returns (TableDataResponse) {}
  rpc TakeTableDataRange(TableDataRangeTakeRequest) returns (TableDataResponse) {}
  rpc TakeTableDataStateCkpt(TableDataCkptTakeRequest) returns (TableDataCkptResponse) {}
  rpc DeleteTableDataRecord(TableDataRecordDeleteRequest) returns (TableDataResponse) {}

  rpc ConnectJobMonitor(ConnectJobMonitorRequest) returns (JobMonitorResponse) {}
  rpc SendAcitonToJobMonitor(JobMonitorAcitonRequest) returns (JobMonitorResponse) {}
  rpc GetJobStatusFromJobMonitor(JobMonitorGetJobStatusRequest) returns (JobMonitorResponse) {}

  rpc ConnectElasticDataManager(ElasticDataManagerConnectRequest) returns (ElasticDataManagerCommonResponse) {}
  rpc IsReadyElasticDataManager(ElasticDataManagerIsReadyRequest) returns (ElasticDataManagerIsReadyResponse) {}
  rpc GetSliceFromElasticDataManager(ElasticDataManagerGetSliceRequest) returns (ElasticDataManagerGetSliceResponse) {}
  rpc CommitSliceToElasticDataManager(ElasticDataManagerCommitSliceRequest) returns (ElasticDataManagerCommonResponse) {}
  rpc GetDataStateFromElasticDataManager(ElasticDataManagerGetDataStateRequest) returns (ElasticDataManagerGetDataStateResponse) {}
}


message SchedulerRegisterRequest {
  string job = 1;
  int64 id = 2;
  string addr = 3;
  int64 version = 4;
}

message SchedulerRegisterResponse {
  Code code = 1;
  string msg = 2;
  int64 version = 3;
}

message SchedulerGetClusterRequest {
}

message SchedulerGetClusterResponse {
  Code code = 1;
  string msg = 2;
  ClusterDef cluster = 3;
}

message SchedulerWatchRequest {
  string job = 1;
  int64 id = 2;
}

message SchedulerWatchResponse {
  Code code = 1;
  string msg = 2;
  int64 signal = 3;
}

message SchedulerSignalRequest {
  string job = 1;
  int64 id = 2;
}

message SchedulerSignalResponse {
  Code code = 1;
  string msg = 2;
}

message SchedulerActivateTwoWayRpcRequest {
  string job = 1;
  int64 id = 2;
}

message SchedulerActivateTwoWayRpcResponse {
  Code code = 1;
  string msg = 2;
}

message SchedulerNotifyCheckpointDoneRequest {
  string ckpt_status = 1;
}

message SchedulerNotifyCheckpointDoneResponse {
  Code code = 1;
  string msg = 2;
}

message SchedulerBeingTerminatedRequest {
  string job = 1;
  int64 id = 2;
  string terminated_msg = 3;
}

message SchedulerBeingTerminatedResponse {
  Code code = 1;
  string msg = 2;
}

message AIMasterRequest {
  Code code = 1;
  string msg = 2;
}

message AIMasterResponse {
  Code code = 1;
  string msg = 2;
}

message  PsResourceRequest {
  int32 ps_num = 1;
  int64 ps_memory = 2;
  bool has_ev = 3;
}

message  ProcessResourceRequest {
  string job_name = 1;
  int32 task_index= 2;
  int64 proc_memory = 3;
}

message TableDataStartRequest {
  string task_name = 1;
  int32 task_index = 2;
  int64 num_records = 3;
  int32 slice_size = 4;
  int32 num_epochs = 5;
  bool shuffle = 6;
  int32 cur_epochs = 7;
  int32 range_index = 8;
  int64 seed = 9;
  bool train_mode = 10;
}

message TableDataRangeTakeRequest {
  string task_name = 1;
  int32 task_index = 2;
}

message TableDataCkptTakeRequest {
  string task_name = 1;
  int32 task_index = 2;
}

message TableDataRecordDeleteRequest {
  string task_name = 1;
  int32 task_index = 2;
  string item = 3;
}

message TableDataCkptResponse {
  Code code = 1;
  string ckpt = 2;
}

message TableDataResponse {
  Code code = 1;
  string item = 2;
}

message ConnectJobMonitorRequest {
  string task_name = 1;
  int32 task_index = 2;
}

message JobMonitorAcitonRequest {
  string action_type = 1;
  int64 timestamp = 2;
  string task_name = 3;
  int32 task_index = 4;
  string options = 5;
}

message JobMonitorGetJobStatusRequest {
  string task_name = 1;
  int32 task_index = 2;
}

message JobMonitorResponse {
  Code code = 1;
  string msg = 2;
}

message ElasticDataManagerConnectRequest {
  string task_name = 1;
  int32 task_index = 2;
  string config = 3;
}

message ElasticDataManagerIsReadyRequest {
  string task_name = 1;
  int32 task_index = 2;
}

message ElasticDataManagerGetSliceRequest {
  string task_name = 1;
  int32 task_index = 2;
}

message ElasticDataManagerCommitSliceRequest {
  string task_name = 1;
  int32 task_index = 2;
  string slice_tag = 3;
}

message ElasticDataManagerGetDataStateRequest {
  string task_name = 1;
  int32 task_index = 2;
}

message ElasticDataManagerCommonResponse {
  Code code = 1;
  string msg = 2;
}

message ElasticDataManagerIsReadyResponse {
  Code code = 1;
  bool is_ready = 2;
  string msg = 3;
}

message ElasticDataManagerGetSliceResponse {
  Code code = 1;
  string slice_tag = 2;
  string slice_prefix = 3;
  int64 slice_size = 4;
  repeated string slice_data = 5;
  string msg = 6;
}

message ElasticDataManagerGetDataStateResponse {
  Code code = 1;
  string data_state = 2;
  string msg = 3;
}
