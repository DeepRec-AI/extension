# Copyright 2024 The DeepRec Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =============================================================================
""" AIMaster api from openapi codegen."""

from __future__ import absolute_import

# python 2 and python 3 compatibility library
from kubernetes.client.api import custom_objects_api
from kubernetes.client.api_client import ApiClient


from deeprec_master.python.utils import constants
from deeprec_master.python.master_client.utils import retryable_k8s_http_call
from deeprec_master.python.utils.logger import logger


class MasterV1Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        """Initialize an MasterV1Api object"""
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.custom_objects_api_instance = custom_objects_api.CustomObjectsApi(
            self.api_client
        )

    def read_namespace(self, name, namespace, init=False):
        """Read namespace"""
        read_kwargs = {
            "group": (
                constants.CRDConst.INIT_GROUP if init else constants.CRDConst.GROUP
            ),
            "version": (
                constants.CRDConst.INIT_VERSION if init else constants.CRDConst.VERSION
            ),
            "plural": constants.TF_PLURAL_NAME,
            "name": name,
            "namespace": namespace,
        }
        return retryable_k8s_http_call(
            self.custom_objects_api_instance.get_namespaced_custom_object, read_kwargs
        )

    def patch_namespace(self, name, namespace, job_data, init=False):
        """Patch namespace"""
        patched_kwargs = {
            "group": (
                constants.CRDConst.INIT_GROUP if init else constants.CRDConst.GROUP
            ),
            "version": (
                constants.CRDConst.INIT_VERSION if init else constants.CRDConst.VERSION
            ),
            "plural": constants.TF_PLURAL_NAME,
            "name": name,
            "namespace": namespace,
            "body": job_data,
        }
        return retryable_k8s_http_call(
            self.custom_objects_api_instance.patch_namespaced_custom_object,
            patched_kwargs,
        )

    def list_namespace(self, name, namespace, **kwargs):
        """List namespace"""
        read_kwargs = {
            "group": constants.CRDConst.GROUP,
            "version": constants.CRDConst.VERSION,
            "plural": constants.TF_PLURAL_NAME,
            "field_selector": "metadata.name=" + name,
            "namespace": namespace,
        }
        kwargs = {**read_kwargs, **kwargs}
        return retryable_k8s_http_call(
            self.custom_objects_api_instance.list_namespaced_custom_object, kwargs
        )
