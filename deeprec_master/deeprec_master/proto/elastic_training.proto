syntax = "proto3";

package deeprecmaster;

import "deeprec_master/proto/error_code.proto";

enum ElasticTrainingState {
  INIT = 0;
  READY = 1;
  SCALING = 2;
  All_SESSION_CLOSED = 3;
}

enum ScalingAction {
  NONE = 0;
  SCALING_UP = 1;
  SCALING_DOWN = 2;
}

message IsReadyScalingRequest {
  int32 task_index = 1;
}

message IsReadyScalingResponse {
  Code code = 1;
  string msg = 2;
  ScalingAction scaling_action = 3;
  int32 ps_num = 4; // updated ps_num;
}

message ReadyToUpdateRequest {};
message ReadyToUpdateResponse {};

message UpdateServerDefRequest {
  string cluster_def = 1;
}

message UpdateServerDefResponse {
  Code code = 1;
  string msg = 2;
}

message FetchParamsRequest {
  repeated string names = 1; // vec of partitioned variables or ev
}

message FetchParamsResponse {
  Code code = 1;
  string msg = 2;
  map<string, int32> param_partition_map = 3; // per partition num of variable
}

message MasterRequest {
  Code code = 1;
  string msg = 2;
}

message MasterResponse {
  Code code = 1;
  string msg = 2;
}

message  PsResourceRequest {
  int32 ps_num = 1;
  int64 ps_memory = 2;
  bool has_ev = 3;
}

message SendMetricsRequest {
  int64 timestamp = 1;
  string task_name = 2;
  int32 task_index = 3;
  string options = 4;
}

message SendMetricsResponse {

}

service ElasticTrainingService {
  rpc GetTFConfig(MasterRequest) returns (MasterResponse) {}
  rpc SetTFConfig(MasterRequest) returns (MasterResponse) {}
  rpc EstimatePSResource(PsResourceRequest) returns (MasterResponse);
  rpc SendMetrics(SendMetricsRequest) returns (MasterResponse);

  rpc IsReadyScaling(IsReadyScalingRequest) returns (IsReadyScalingResponse);
  rpc ReadyToUpdate(ReadyToUpdateRequest) returns (ReadyToUpdateResponse);
  rpc UpdateServerDef(UpdateServerDefRequest) returns (UpdateServerDefResponse);
  rpc FetchParamsMeta(FetchParamsRequest) returns (FetchParamsResponse);
}
